# Compile Godot 4
# See also: https://docs.godotengine.org/en/latest/development/compiling/compiling_for_linuxbsd.html

name: Godot build pipeline

#env:


on:
  workflow_dispatch: # manual trigger
  push:
  schedule:
    # Run at 02:47 UTC each morning
    - cron: "47 2 * * *"

defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  compile-godot:
    # For runners, see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.artifact }}-editor

    strategy:
      fail-fast: false
      matrix:
        include:
          # https://docs.godotengine.org/en/latest/development/compiling/compiling_for_linuxbsd.html#doc-compiling-for-linuxbsd
          - id: linux
            runner: ubuntu-20.04
            artifact: linux
            cmd:
              install-scons: pip install scons==3.1.2
              scons-platform: linuxbsd
              # cores: nproc

          # https://docs.godotengine.org/en/latest/development/compiling/compiling_for_macos.html#doc-compiling-for-macos
          # macOS runners are x86_64
          - id: macos
            runner: macos-latest
            artifact: macos
            cmd:
              install-scons: brew install scons
              scons-platform: macos
              #cores: --jobs=$(sysctl -n hw.logicalcpu)
              # arch=x86_64
              # arch=arm64

          # https://docs.godotengine.org/en/latest/development/compiling/compiling_for_windows.html#doc-compiling-for-windows
          # Note: we use scons v3 (not v4), which does not recognize Visual Studio 2022 (MSVC v19.32), so we need older runner
          - id: windows
            runner: windows-2019
            artifact: windows
            cmd:
              install-scons: pip install scons==3.1.2
              scons-platform: windows

        # install-scons: pip install scons==3.1.2
        # cores: nproc


    steps:
      - name: "Clone Godot"
        # Note: GODOT_BIN file does not yet exist, but the path can already be stored
        run: |
          git clone https://github.com/godotengine/godot.git --depth 1 --branch master .
          echo "SHA=`git rev-parse HEAD`" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "GODOT_BIN=bin/godot.${{ matrix.cmd.scons-platform }}.editor.dev.x86_64" >> $GITHUB_ENV

      - name: "Check cache for Godot version ${{ env.SHORT_SHA }}"
        id: cache-godot
        uses: actions/cache@v3
        with:
          path: bin #${{ runner.temp }}/godot_bin
          key: godot-${{ runner.os }}-${{ env.SHA }}

      - name: "Copy GDExtension header"
        run: |
          mkdir -p bin
          cp core/extension/gdnative_interface.h bin/gdnative_interface.h

      - name: "Install scons"
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          ${{ matrix.cmd.install-scons }}
          scons --version

      - name: "[Linux] C dependencies"
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id == 'linux'
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb wget unzip \
              llvm libspeechd-dev speech-dispatcher fontconfig libfontconfig-dev

      - name: "[macOS] - MoltenVK Vulkan library"
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id == 'macos'
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      - name: "[Linux|macOS] Compile Godot..."
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id != 'windows'
        run: |
          #echo "Number of cores: $(${{ matrix.cmd.cores }})"
          scons platform=${{ matrix.cmd.scons-platform }} target=editor dev_build=yes

      - name: "[Linux|macOS] Make executable"
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id != 'windows'
        run: chmod +x $GODOT_BIN

      - name: "[Windows] - MSVC developer console"
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      # /FS: platform\windows\crash_handler_windows.cpp: fatal error C1041: cannot open program database
      - name: "[Windows] Compile Godot..."
        id: compile
        if: steps.cache-godot.outputs.cache-hit != 'true' && matrix.id == 'windows'
        continue-on-error: true
        run: |
          cl
          scons platform=${{ matrix.cmd.scons-platform }} target=editor dev_build=yes mingw=no
        shell: cmd

      # Workaround for the following error that often happens. /FS did not help.
      # 'D:\a\godot4-nightly\godot4-nightly\vc140.pdb'; if multiple CL.EXE write to the same .PDB file, please use /FS
      - name: "[Windows] Compile Godot with -j1 if previous failed..."
        if: matrix.id == 'windows' && steps.compile.outcome == 'failure'
        run: |
          cl
          scons -j1 platform=${{ matrix.cmd.scons-platform }} target=editor dev_build=yes mingw=no
        shell: cmd

      # Upload artifact also when cached (so last successful workflow always has artifact)
      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: godot-${{ matrix.artifact }}
          path: bin

      - name: "Summary"
        # xargs has the nice side effect of trimming leading/trailing whitespace, see https://stackoverflow.com/a/12973694
        # The other answers, while more "idiomatic" (if that can even be said for something like bash), are not properly handling newlines
        run: |
          ls -la bin
          godotVer=$($GODOT_BIN --version | xargs)
          echo "## Godot version: \`$godotVer\`" >> $GITHUB_STEP_SUMMARY
          echo "Built for **${{ matrix.artifact }}** from commit [\`$SHA\`](https://github.com/godotengine/godot/commit/$SHA)." >> $GITHUB_STEP_SUMMARY
